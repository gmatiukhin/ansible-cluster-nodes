- name: Setup ZeroTier network
  hosts: nodes
  become: yes
  gather_facts: yes

  vars_prompt:
  - name: zerotier_network_id
    prompt: Please enter the network ID

  tasks:
  - name: Ensure that curl is installed
    ansible.builtin.apt:
      name: curl
      state: present
  - name: Ensure that gpg is installed
    ansible.builtin.apt:
      name: gpg
      state: present
  - name: Install ZeroTier
    shell: >-
      curl -s
      'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg'
      | gpg --import &&
      if z=$(curl -s 'https://install.zerotier.com/' | gpg);
      then echo "$z" | sudo bash; fi
  - name: Test ZeroTier install
    shell: zerotier-cli info
    changed_when: no
    register: zerotier_output
  - name: Assert ZeroTier is online
    assert:
      that:
      - (zerotier_output['stdout'] | split)[-1] == "ONLINE"
      success_msg: "Host {{ ansible_hostname}} has address: {{ (zerotier_output['stdout'] | split)[2] }}"
      fail_msg: "Host {{ ansible_hostname }} is not online."
  - name: Save address to a variable
    ansible.builtin.set_fact:
      zt_address: "{{ (zerotier_output['stdout'] | split)[2] }}"
  - name: Join network
    shell: "zerotier-cli join {{ zerotier_network_id }}"
  - name: Wait for authorization
    pause:
      prompt: Please authorize this host `{{ ansible_hostname }}` with address `{{ zt_address }}` in the controller UI. Press Enter when you are done.
  - name: Collect network data
    shell: zerotier-cli listnetworks
    changed_when: no
    register: zerotier_output
  - name: Assert ZeroTier network joined successfully
    assert:
      that:
      - ((zerotier_output['stdout_lines'] | select('regex', '.*' + zerotier_network_id + '.*'))[0] | split)[5] == "OK"
      success_msg: "Host {{ ansible_hostname }} has joined the network {{ zerotier_network_id }} successfully."
      fail_msg: "Host {{ ansible_hostname }} could not join the network {{ zerotier_network_id }}."
